(range 0 1)
;=>[0]
;/^$

(range 0 0)
;=>[]
;/^$

(range 0 4)
;=>[0 1 2 3]
;/^$

(range 0 -1)
;=>[]
;/^$

(range -10 -9)
;=>[-10]
;/^$

(range 10 11)
;=>[10]
;/^$

(binary2str (unbase64 (base64 (str2binary "Hello World"))))
;=>"Hello World"
;/^$

(binary2str (unbase64 (base64 (str2binary "안녕 하세요"))))
;=>"안녕 하세요"
;/^$

¬Hello¬
;=>"Hello"
;/^$

(def! a ¬Hello¬)
;=>"Hello"
;/^$

(def! a ¬"Hello"¬)
;=>"\"Hello\""
;/^$

(def! a ¬Hello¬)
;=>"Hello"
;/^$

;; Testing str

(str)
;=>""

(str ¬¬)
;=>""

(str ¬abc¬)
;=>"abc"

(str ¬¬¬¬)
;=>"¬"

(str "¬")
;=>"¬"

(str 1 ¬abc¬ 3)
;=>"1abc3"

(str ¬abc  def¬ ¬ghi jkl¬)
;=>"abc  defghi jkl"

(str ¬abc\ndef\nghi¬)
;=>"abc\\ndef\\nghi"

(str ¬abc\\def\\ghi¬)
;=>"abc\\\\def\\\\ghi"

(str (list 1 2 ¬abc¬ ¬"¬) ¬def¬)
;=>"(1 2 abc \")def"

(str (list 1 2 ¬abc¬ ¬¬¬¬) ¬def¬)
;=>"(1 2 abc ¬)def"

;; Testing prn
(prn)
;/
;=>nil

(prn ¬¬)
;/""
;=>nil

(prn ¬abc¬)
;/"abc"
;=>nil

(prn ¬abc  def¬ ¬ghi jkl¬)
;/"abc  def" "ghi jkl"

(prn ¬"¬)
;/"\\""
;=>nil

(prn ¬¬¬¬)
;/"¬"
;=>nil

(prn "¬")
;/"¬"
;=>nil

(prn ¬abc\ndef\nghi¬)
;/"abc\\\\ndef\\\\nghi"
;=>nil

(prn ¬abc\\def\\ghi¬)
;/"abc\\\\\\\\def\\\\\\\\ghi"
;=>nil

(prn (list 1 2 ¬abc¬ ¬"¬) ¬def¬)
;/\(1 2 "abc" "\\""\) "def"
;=>nil

(prn (list 1 2 ¬abc¬ ¬¬¬¬) ¬def¬)
;/\(1 2 "abc" "¬"\) "def"
;=>nil


;; Testing println
(println)
;/
;=>nil

(println ¬¬)
;/
;=>nil

(println ¬abc¬)
;/abc
;=>nil

(println ¬abc  def¬ ¬ghi jkl¬)
;/abc  def ghi jkl

(println ¬¬¬¬)
;/¬
;=>nil

(println ¬abc\ndef\nghi¬)
;/abc
;/def
;/ghi
;=>nil

(prn "{\"hello\"}")
;/¬{"hello"}¬
;=>nil

(prn "{hello}")
;/"{hello}"
;=>nil
